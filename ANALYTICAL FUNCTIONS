

-- 6. Assign a rank to employees based on their salary within each department.
-- Uses RANK() to assign ranks based on salary in each department.

select department_id, employee_id, salary,
RANK() OVER (PARTITION BY department_id ORDER BY Salary Desc) AS salary_rank
FROM SH.employees;


-- 7. Find the top 3 highest-paid employees in each department.
-- Uses RANK() to rank employees based on salary and filters top 3.

select department_id,employee_id,Salary
FROM(
    SELECT department_id,employee_id,salary,
    RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS salary_rank
    from employees
)where salary_rank<=3;

-- 8. Identify the second highest salary in each department using DENSE_RANK().
-- Uses DENSE_RANK() to identify employees with the second-highest salary per department.


SELECT department_id,employee_id,Salary
from(
    select department_id,employee_id,Salary,
    DENSE_RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS salary_rank
    from SH.employeea
)WHERE salary_rank=2;

-- 9. Compute the cumulative total salary of employees ordered by hire date.
-- Uses SUM() OVER() to create a running total of salaries.

select employee_id,hire_date,salary,
sum(Salary)over(order by hire_date) as cumulative_salary
from employees;


-- 10. Assign a row number to each employee in each department.
-- Uses ROW_NUMBER() to assign a unique row number per department.

select department_id,employee_id,
ROW_NUMBER() OVER(PARTITION BY depaertment_id ORDER BY employee_id) AS row_num
from SH.employees;

-- 11. Find the salary difference between each employee and the next highest-paid employee.
-- Uses LEAD() to compare an employee's salary with the next highest.


select employee_id,Salary,
lead(salary) OVER (ORDER BY salary DESC) - salary as salary_diff
from SH.employees

-- 12. Calculate the previous monthâ€™s salary for each employee using LAG().
-- Uses LAG() to get the previous salary entry for each employee.

SELECT employee_id,hire_date,salary,
LAG(salary) OVER (PARTITION BY employee_id ORDER BY hire_date) AS prev_salary
from employees;


-- 13. Identify employees whose salaries increased over time.
-- Uses LAG() to compare an employee's current and previous salaries.




SELECT employee_id,hire_date,salary,
LAG(salary) OVER (PARTITION BY employee_id ORDER BY hire_date) AS prev_salary
CASE WHEN salary > LAG (salary) over (PARTITION BY employee_id ORDER BY hire_date)
  THEN 'Increased' ELSE 'Decreased' END AS salary_trend
  FROM SH.employees;


